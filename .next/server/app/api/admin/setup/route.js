"use strict";(()=>{var e={};e.id=909,e.ids=[909],e.modules={3524:e=>{e.exports=require("@prisma/client")},7096:e=>{e.exports=require("bcrypt")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},1209:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>w,patchFetch:()=>j,requestAsyncStorage:()=>x,routeModule:()=>m,serverHooks:()=>v,staticGenerationAsyncStorage:()=>h});var s={};t.r(s),t.d(s,{POST:()=>l});var a=t(9303),n=t(8716),o=t(670),i=t(7070),u=t(3524),p=t(7096),d=t.n(p);let c=new u.PrismaClient;async function l(e){try{if(await c.user.count()>0)return i.NextResponse.json({error:"Admin account already exists"},{status:409});let{email:r,name:t,password:s}=await e.json();if(!r||!s)return i.NextResponse.json({error:"Email and password are required"},{status:400});let a=await d().hash(s,10),{password:n,...o}=await c.user.create({data:{email:r,name:t,password:a}});return i.NextResponse.json(o,{status:201})}catch(e){return console.error("Admin setup error:",e),i.NextResponse.json({error:"Internal Server Error"},{status:500})}}let m=new a.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/admin/setup/route",pathname:"/api/admin/setup",filename:"route",bundlePath:"app/api/admin/setup/route"},resolvedPagePath:"C:\\Users\\kazuy\\sns\\src\\app\\api\\admin\\setup\\route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:x,staticGenerationAsyncStorage:h,serverHooks:v}=m,w="/api/admin/setup/route";function j(){return(0,o.patchFetch)({serverHooks:v,staticGenerationAsyncStorage:h})}}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[276,972],()=>t(1209));module.exports=s})();